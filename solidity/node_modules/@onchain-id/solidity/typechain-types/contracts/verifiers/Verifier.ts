/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface VerifierInterface extends utils.Interface {
  functions: {
    "addClaimTopic(uint256)": FunctionFragment;
    "addTrustedIssuer(address,uint256[])": FunctionFragment;
    "claimTopicsToTrustedIssuers(uint256,uint256)": FunctionFragment;
    "getTrustedIssuerClaimTopics(address)": FunctionFragment;
    "getTrustedIssuers()": FunctionFragment;
    "getTrustedIssuersForClaimTopic(uint256)": FunctionFragment;
    "hasClaimTopic(address,uint256)": FunctionFragment;
    "isClaimTopicRequired(uint256)": FunctionFragment;
    "isTrustedIssuer(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeClaimTopic(uint256)": FunctionFragment;
    "removeTrustedIssuer(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requiredClaimTopics(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "trustedIssuerClaimTopics(address,uint256)": FunctionFragment;
    "trustedIssuers(uint256)": FunctionFragment;
    "updateIssuerClaimTopics(address,uint256[])": FunctionFragment;
    "verify(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addClaimTopic"
      | "addTrustedIssuer"
      | "claimTopicsToTrustedIssuers"
      | "getTrustedIssuerClaimTopics"
      | "getTrustedIssuers"
      | "getTrustedIssuersForClaimTopic"
      | "hasClaimTopic"
      | "isClaimTopicRequired"
      | "isTrustedIssuer"
      | "owner"
      | "removeClaimTopic"
      | "removeTrustedIssuer"
      | "renounceOwnership"
      | "requiredClaimTopics"
      | "transferOwnership"
      | "trustedIssuerClaimTopics"
      | "trustedIssuers"
      | "updateIssuerClaimTopics"
      | "verify"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addClaimTopic",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addTrustedIssuer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTopicsToTrustedIssuers",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedIssuerClaimTopics",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedIssuers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedIssuersForClaimTopic",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimTopic",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimTopicRequired",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedIssuer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeClaimTopic",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTrustedIssuer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiredClaimTopics",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedIssuerClaimTopics",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedIssuers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIssuerClaimTopics",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addClaimTopic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTrustedIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTopicsToTrustedIssuers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedIssuerClaimTopics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedIssuers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedIssuersForClaimTopic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasClaimTopic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isClaimTopicRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeClaimTopic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTrustedIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredClaimTopics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedIssuerClaimTopics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedIssuers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIssuerClaimTopics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {
    "ClaimTopicAdded(uint256)": EventFragment;
    "ClaimTopicRemoved(uint256)": EventFragment;
    "ClaimTopicsUpdated(address,uint256[])": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TrustedIssuerAdded(address,uint256[])": EventFragment;
    "TrustedIssuerRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimTopicAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimTopicRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimTopicsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrustedIssuerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrustedIssuerRemoved"): EventFragment;
}

export interface ClaimTopicAddedEventObject {
  claimTopic: BigNumber;
}
export type ClaimTopicAddedEvent = TypedEvent<
  [BigNumber],
  ClaimTopicAddedEventObject
>;

export type ClaimTopicAddedEventFilter = TypedEventFilter<ClaimTopicAddedEvent>;

export interface ClaimTopicRemovedEventObject {
  claimTopic: BigNumber;
}
export type ClaimTopicRemovedEvent = TypedEvent<
  [BigNumber],
  ClaimTopicRemovedEventObject
>;

export type ClaimTopicRemovedEventFilter =
  TypedEventFilter<ClaimTopicRemovedEvent>;

export interface ClaimTopicsUpdatedEventObject {
  trustedIssuer: string;
  claimTopics: BigNumber[];
}
export type ClaimTopicsUpdatedEvent = TypedEvent<
  [string, BigNumber[]],
  ClaimTopicsUpdatedEventObject
>;

export type ClaimTopicsUpdatedEventFilter =
  TypedEventFilter<ClaimTopicsUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TrustedIssuerAddedEventObject {
  trustedIssuer: string;
  claimTopics: BigNumber[];
}
export type TrustedIssuerAddedEvent = TypedEvent<
  [string, BigNumber[]],
  TrustedIssuerAddedEventObject
>;

export type TrustedIssuerAddedEventFilter =
  TypedEventFilter<TrustedIssuerAddedEvent>;

export interface TrustedIssuerRemovedEventObject {
  trustedIssuer: string;
}
export type TrustedIssuerRemovedEvent = TypedEvent<
  [string],
  TrustedIssuerRemovedEventObject
>;

export type TrustedIssuerRemovedEventFilter =
  TypedEventFilter<TrustedIssuerRemovedEvent>;

export interface Verifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addClaimTopic(
      claimTopic: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTrustedIssuer(
      trustedIssuer: PromiseOrValue<string>,
      claimTopics: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimTopicsToTrustedIssuers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTrustedIssuerClaimTopics(
      trustedIssuer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTrustedIssuers(overrides?: CallOverrides): Promise<[string[]]>;

    getTrustedIssuersForClaimTopic(
      claimTopic: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    hasClaimTopic(
      issuer: PromiseOrValue<string>,
      claimTopic: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isClaimTopicRequired(
      claimTopic: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTrustedIssuer(
      issuer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeClaimTopic(
      claimTopic: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeTrustedIssuer(
      trustedIssuer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requiredClaimTopics(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    trustedIssuerClaimTopics(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    trustedIssuers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    updateIssuerClaimTopics(
      trustedIssuer: PromiseOrValue<string>,
      newClaimTopics: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verify(
      identity: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isVerified: boolean }>;
  };

  addClaimTopic(
    claimTopic: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTrustedIssuer(
    trustedIssuer: PromiseOrValue<string>,
    claimTopics: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimTopicsToTrustedIssuers(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTrustedIssuerClaimTopics(
    trustedIssuer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTrustedIssuers(overrides?: CallOverrides): Promise<string[]>;

  getTrustedIssuersForClaimTopic(
    claimTopic: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  hasClaimTopic(
    issuer: PromiseOrValue<string>,
    claimTopic: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isClaimTopicRequired(
    claimTopic: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTrustedIssuer(
    issuer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeClaimTopic(
    claimTopic: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeTrustedIssuer(
    trustedIssuer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requiredClaimTopics(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  trustedIssuerClaimTopics(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  trustedIssuers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  updateIssuerClaimTopics(
    trustedIssuer: PromiseOrValue<string>,
    newClaimTopics: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verify(
    identity: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addClaimTopic(
      claimTopic: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addTrustedIssuer(
      trustedIssuer: PromiseOrValue<string>,
      claimTopics: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimTopicsToTrustedIssuers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTrustedIssuerClaimTopics(
      trustedIssuer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTrustedIssuers(overrides?: CallOverrides): Promise<string[]>;

    getTrustedIssuersForClaimTopic(
      claimTopic: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    hasClaimTopic(
      issuer: PromiseOrValue<string>,
      claimTopic: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isClaimTopicRequired(
      claimTopic: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTrustedIssuer(
      issuer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeClaimTopic(
      claimTopic: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeTrustedIssuer(
      trustedIssuer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requiredClaimTopics(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    trustedIssuerClaimTopics(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    trustedIssuers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    updateIssuerClaimTopics(
      trustedIssuer: PromiseOrValue<string>,
      newClaimTopics: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    verify(
      identity: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ClaimTopicAdded(uint256)"(
      claimTopic?: PromiseOrValue<BigNumberish> | null
    ): ClaimTopicAddedEventFilter;
    ClaimTopicAdded(
      claimTopic?: PromiseOrValue<BigNumberish> | null
    ): ClaimTopicAddedEventFilter;

    "ClaimTopicRemoved(uint256)"(
      claimTopic?: PromiseOrValue<BigNumberish> | null
    ): ClaimTopicRemovedEventFilter;
    ClaimTopicRemoved(
      claimTopic?: PromiseOrValue<BigNumberish> | null
    ): ClaimTopicRemovedEventFilter;

    "ClaimTopicsUpdated(address,uint256[])"(
      trustedIssuer?: PromiseOrValue<string> | null,
      claimTopics?: null
    ): ClaimTopicsUpdatedEventFilter;
    ClaimTopicsUpdated(
      trustedIssuer?: PromiseOrValue<string> | null,
      claimTopics?: null
    ): ClaimTopicsUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "TrustedIssuerAdded(address,uint256[])"(
      trustedIssuer?: PromiseOrValue<string> | null,
      claimTopics?: null
    ): TrustedIssuerAddedEventFilter;
    TrustedIssuerAdded(
      trustedIssuer?: PromiseOrValue<string> | null,
      claimTopics?: null
    ): TrustedIssuerAddedEventFilter;

    "TrustedIssuerRemoved(address)"(
      trustedIssuer?: PromiseOrValue<string> | null
    ): TrustedIssuerRemovedEventFilter;
    TrustedIssuerRemoved(
      trustedIssuer?: PromiseOrValue<string> | null
    ): TrustedIssuerRemovedEventFilter;
  };

  estimateGas: {
    addClaimTopic(
      claimTopic: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTrustedIssuer(
      trustedIssuer: PromiseOrValue<string>,
      claimTopics: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimTopicsToTrustedIssuers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTrustedIssuerClaimTopics(
      trustedIssuer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTrustedIssuers(overrides?: CallOverrides): Promise<BigNumber>;

    getTrustedIssuersForClaimTopic(
      claimTopic: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasClaimTopic(
      issuer: PromiseOrValue<string>,
      claimTopic: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isClaimTopicRequired(
      claimTopic: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedIssuer(
      issuer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeClaimTopic(
      claimTopic: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeTrustedIssuer(
      trustedIssuer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requiredClaimTopics(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    trustedIssuerClaimTopics(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    trustedIssuers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateIssuerClaimTopics(
      trustedIssuer: PromiseOrValue<string>,
      newClaimTopics: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verify(
      identity: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addClaimTopic(
      claimTopic: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTrustedIssuer(
      trustedIssuer: PromiseOrValue<string>,
      claimTopics: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimTopicsToTrustedIssuers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTrustedIssuerClaimTopics(
      trustedIssuer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTrustedIssuers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTrustedIssuersForClaimTopic(
      claimTopic: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasClaimTopic(
      issuer: PromiseOrValue<string>,
      claimTopic: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isClaimTopicRequired(
      claimTopic: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedIssuer(
      issuer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeClaimTopic(
      claimTopic: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeTrustedIssuer(
      trustedIssuer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requiredClaimTopics(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    trustedIssuerClaimTopics(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    trustedIssuers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateIssuerClaimTopics(
      trustedIssuer: PromiseOrValue<string>,
      newClaimTopics: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verify(
      identity: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
